# 使用log4j.jar一定要配置此文件。不然运行报异常。
# 全局日志配置
# DEBUG是输出级别 指定配置名stdout
# 日记级别(单个级别) 控制台/文件/数据库/EMAIL DATASOURCE
log4j.rootLogger=DEBUG,CONSOLE
#,INFOLOGFILE,WARNLOGFILE,ERRORLOGFILE,DEBUGDATASOURCE,INFODATASOURCE,WARNDATASOURCE,ERRORDATASOURCE

# 指定特定包的日志输出级别
log4j.logger.org.apache.ibatis=WARN
log4j.logger.java.sql=DEBUG
log4j.logger.com.alibaba.druid=WARN
log4j.logger.org.springframework=WARN
log4j.logger.org.mybatis.spring=WARN
log4j.logger.com.baomidou.mybatisplus.core=WARN
log4j.logger.com.baomidou.mybatisplus.extension.spring=WARN

#=========================== 自定义输出格式说明================================ -->
# %p 输出优先级，即TRACE，DEBUG，INFO，WARN，ERROR，FATAL
# %r 输出自应用启动到输出该log信息耗费的毫秒数
# %c 输出所属的类目，通常就是所在类的全名
# %t 输出产生该日志事件的线程名
# %n 输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n”
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
# %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlo4.main(TestLog4.java:10)
# %F 输出文件名
# %L 输出行号
#=========================================================================== -->
#
#================================ 输出方式说明================================
# Log4j提供的appender有以下几种:
#   org.apache.log4j.ConsoleAppender(控制台),
#   org.apache.log4j.FileAppender(文件),
#   org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件),
#   org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件),
#   org.apache.log4j.WriterAppender(将日志信息以流格式发送到任意指定的地方)
#   org.apache.log4j.net.SMTPAppender(将日志信息以Email发送到邮箱)
#===========================================================================

#### 控制台输出
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.threshold=DEBUG
log4j.appender.CONSOLE.Encoding=UTF-8
log4j.appender.CONSOLE.Target=System.out
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern=%-5p %d{yyyy-MM-dd HH:mm:ss.SSS} %m (%c{10}:%L) %n
#log4j.appender.CONSOLE.layout.ConversionPattern=%-5p %d{yyyy-MM-dd HH:mm:ss.SSS} %m  (%F:%L) %n
#log4j.appender.CONSOLE.layout.ConversionPattern=[%-5p] - [%-d{yyyy-MM-dd HH:mm:ss.SSS}] - [线程:%t] - [类:%c] - [方法:%M] - [行号:%L] - [详情:%m] - [耗时:%r]%n

#### INFO文件输出
log4j.appender.INFOLOGFILE=org.apache.log4j.RollingFileAppender
log4j.appender.INFOLOGFILE.threshold=INFO
log4j.appender.INFOLOGFILE.Encoding=UTF-8
log4j.appender.INFOLOGFILE.File=logs/info.log
log4j.appender.INFOLOGFILE.MaxFileSize=5MB
log4j.appender.INFOLOGFILE.MaxBackupIndex=10
log4j.appender.INFOLOGFILE.layout=org.apache.log4j.PatternLayout
log4j.appender.INFOLOGFILE.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss a} [Thread: %t][ Class:%c >> Method: %l ]%n%p:%m%n

#### WARN文件输出
log4j.appender.WARNLOGFILE=org.apache.log4j.RollingFileAppender
log4j.appender.WARNLOGFILE.threshold=WARN
log4j.appender.WARNLOGFILE.Encoding=UTF-8
log4j.appender.WARNLOGFILE.File=logs/warn.log
log4j.appender.WARNLOGFILE.MaxFileSize=5MB
log4j.appender.WARNLOGFILE.MaxBackupIndex=10
log4j.appender.WARNLOGFILE.layout=org.apache.log4j.PatternLayout
log4j.appender.WARNLOGFILE.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss a} [Thread: %t][ Class:%c >> Method: %l ]%n%p:%m%n

#### ERROR文件输出
log4j.appender.ERRORLOGFILE=org.apache.log4j.RollingFileAppender
log4j.appender.ERRORLOGFILE.threshold=ERROR
log4j.appender.ERRORLOGFILE.Encoding=UTF-8
log4j.appender.ERRORLOGFILE.File=logs/error.log
log4j.appender.ERRORLOGFILE.MaxFileSize=5MB
log4j.appender.ERRORLOGFILE.MaxBackupIndex=10
log4j.appender.ERRORLOGFILE.layout=org.apache.log4j.PatternLayout
log4j.appender.ERRORLOGFILE.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss a} [Thread: %t][ Class:%c >> Method: %l ]%n%p:%m%n

#### EMAIL输出
#log4j.appender.ERRORLOGEMAIL=org.apache.log4j.net.SMTPAppender
#log4j.appender.ERRORLOGEMAIL.threshold=DEBUG
#log4j.appender.ERRORLOGEMAIL.BufferSize=16
#log4j.appender.ERRORLOGEMAIL.From=396096473@qq.com
#log4j.appender.ERRORLOGEMAIL.SMTPHost=smtp.qq.com
#log4j.appender.ERRORLOGEMAIL.Subject=juyee-log4jMessage
#log4j.appender.ERRORLOGEMAIL.To=laifengting@foxmail.com
#log4j.appender.ERRORLOGEMAIL.SMTPUsername=396096473@qq.com
#log4j.appender.ERRORLOGEMAIL.SMTPPassword=lmq201314
#log4j.appender.ERRORLOGEMAIL.layout=org.apache.log4j.PatternLayout
#log4j.appender.ERRORLOGEMAIL.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss a} [Thread: %t][ Class:%c >> Method: %l ]%n%p:%m%n

#### DEBUG数据库输出
# 配置输出目标为数据库（假如要将日志在控制台输出，配置为log4j.appender. stdout =org.apache.log4j.ConsoleAppender；将日志写入文件，配置为log4j.appender.logfile=org.apache.log4j.DailyRollingFileAppender
# 这样的配置在许多地方都要有，需要可查有关资料）,当然你也可以自己扩展org.apache.log4j.jdbc.JDBCAppender这个类，只需要在这里配置就可以了例如我们配置我自己扩展的MyJDBCAppender，配置为#log4j.appender.db=com.neam.commons.MyJDBCAppender
log4j.appender.DEBUGDATASOURCE=org.apache.log4j.jdbc.JDBCAppender
# 定义什么级别的错误将写入到数据库中
log4j.appender.DEBUGDATASOURCE.threshold=DEBUG
# 设置缓存大小，就是当有1条日志信息时就往数据库插一次，设置的数据库名和表名均为user
log4j.appender.DEBUGDATASOURCE.BufferSize=1
log4j.appender.DEBUGDATASOURCE.driver=com.mysql.cj.jdbc.Driver
log4j.appender.DEBUGDATASOURCE.URL=jdbc:mysql://localhost:3306/logs?allowMultiQueries=true&rewriteBatchedStatements=true&useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false&nullCatalogMeansCurrent=true
log4j.appender.DEBUGDATASOURCE.user=root
log4j.appender.DEBUGDATASOURCE.password=201314
log4j.appender.DEBUGDATASOURCE.layout=org.apache.log4j.PatternLayout
log4j.appender.DEBUGDATASOURCE.sql=insert into debug_log(log_level,create_time,thread,class,method,log_line,msg,times)values('%-5p','%-d{yyyy-MM-dd HH:mm:ss.SSS}','%t','%c','%M','%L','%m','%r')
#log4j.appender.DATASOURCE.sql=insert into error_log(log_level,create_time,thread,class,method,log_line,msg,times)values('%-5p','%-d{yyyy-MM-dd HH:mm:ss.SSS}','线程:%t','类:%c','方法:%M','行号:%L','详情:%m','耗时:%r')
# log4j.appender.DATASOURCE.sql=insert into error_log(log_level,create_time,thread,class,method,log_line,msg,times)values('[%-5p]','[%-d{yyyy-MM-dd HH:mm:ss.SSS}]','[线程:%t]','[类:%c]','[方法:%M]','[行号:%L]','【详情:%m】','[耗时:%r]')


#### INFO数据库输出
# 配置输出目标为数据库（假如要将日志在控制台输出，配置为log4j.appender. stdout =org.apache.log4j.ConsoleAppender；将日志写入文件，配置为log4j.appender.logfile=org.apache.log4j.DailyRollingFileAppender
# 这样的配置在许多地方都要有，需要可查有关资料）,当然你也可以自己扩展org.apache.log4j.jdbc.JDBCAppender这个类，只需要在这里配置就可以了例如我们配置我自己扩展的MyJDBCAppender，配置为#log4j.appender.db=com.neam.commons.MyJDBCAppender
log4j.appender.INFODATASOURCE=org.apache.log4j.jdbc.JDBCAppender
# 定义什么级别的错误将写入到数据库中
log4j.appender.INFODATASOURCE.threshold=INFO
# 设置缓存大小，就是当有1条日志信息时就往数据库插一次，设置的数据库名和表名均为user
log4j.appender.INFODATASOURCE.BufferSize=1
log4j.appender.INFODATASOURCE.driver=com.mysql.cj.jdbc.Driver
log4j.appender.INFODATASOURCE.URL=jdbc:mysql://localhost:3306/logs?allowMultiQueries=true&rewriteBatchedStatements=true&useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false&nullCatalogMeansCurrent=true
log4j.appender.INFODATASOURCE.user=root
log4j.appender.INFODATASOURCE.password=201314
log4j.appender.INFODATASOURCE.layout=org.apache.log4j.PatternLayout
log4j.appender.INFODATASOURCE.sql=insert into info_log(log_level,create_time,thread,class,method,log_line,msg,times)values('%-5p','%-d{yyyy-MM-dd HH:mm:ss.SSS}','%t','%c','%M','%L','%m','%r')
#log4j.appender.DATASOURCE.sql=insert into error_log(log_level,create_time,thread,class,method,log_line,msg,times)values('%-5p','%-d{yyyy-MM-dd HH:mm:ss.SSS}','线程:%t','类:%c','方法:%M','行号:%L','详情:%m','耗时:%r')
# log4j.appender.DATASOURCE.sql=insert into error_log(log_level,create_time,thread,class,method,log_line,msg,times)values('[%-5p]','[%-d{yyyy-MM-dd HH:mm:ss.SSS}]','[线程:%t]','[类:%c]','[方法:%M]','[行号:%L]','【详情:%m】','[耗时:%r]')

#### WARN数据库输出
# 配置输出目标为数据库（假如要将日志在控制台输出，配置为log4j.appender. stdout =org.apache.log4j.ConsoleAppender；将日志写入文件，配置为log4j.appender.logfile=org.apache.log4j.DailyRollingFileAppender
# 这样的配置在许多地方都要有，需要可查有关资料）,当然你也可以自己扩展org.apache.log4j.jdbc.JDBCAppender这个类，只需要在这里配置就可以了例如我们配置我自己扩展的MyJDBCAppender，配置为#log4j.appender.db=com.neam.commons.MyJDBCAppender
log4j.appender.WARNDATASOURCE=org.apache.log4j.jdbc.JDBCAppender
# 定义什么级别的错误将写入到数据库中
log4j.appender.WARNDATASOURCE.threshold=WARN
# 设置缓存大小，就是当有1条日志信息时就往数据库插一次，设置的数据库名和表名均为user
log4j.appender.WARNDATASOURCE.BufferSize=1
log4j.appender.WARNDATASOURCE.driver=com.mysql.cj.jdbc.Driver
log4j.appender.WARNDATASOURCE.URL=jdbc:mysql://localhost:3306/logs?allowMultiQueries=true&rewriteBatchedStatements=true&useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false&nullCatalogMeansCurrent=true
log4j.appender.WARNDATASOURCE.user=root
log4j.appender.WARNDATASOURCE.password=201314
log4j.appender.WARNDATASOURCE.layout=org.apache.log4j.PatternLayout
log4j.appender.WARNDATASOURCE.sql=insert into warn_log(log_level,create_time,thread,class,method,log_line,msg,times)values('%-5p','%-d{yyyy-MM-dd HH:mm:ss.SSS}','%t','%c','%M','%L','%m','%r')
#log4j.appender.DATASOURCE.sql=insert into error_log(log_level,create_time,thread,class,method,log_line,msg,times)values('%-5p','%-d{yyyy-MM-dd HH:mm:ss.SSS}','线程:%t','类:%c','方法:%M','行号:%L','详情:%m','耗时:%r')
# log4j.appender.DATASOURCE.sql=insert into error_log(log_level,create_time,thread,class,method,log_line,msg,times)values('[%-5p]','[%-d{yyyy-MM-dd HH:mm:ss.SSS}]','[线程:%t]','[类:%c]','[方法:%M]','[行号:%L]','【详情:%m】','[耗时:%r]')

#### ERROR数据库输出
# 配置输出目标为数据库（假如要将日志在控制台输出，配置为log4j.appender. stdout =org.apache.log4j.ConsoleAppender；将日志写入文件，配置为log4j.appender.logfile=org.apache.log4j.DailyRollingFileAppender
# 这样的配置在许多地方都要有，需要可查有关资料）,当然你也可以自己扩展org.apache.log4j.jdbc.JDBCAppender这个类，只需要在这里配置就可以了例如我们配置我自己扩展的MyJDBCAppender，配置为#log4j.appender.db=com.neam.commons.MyJDBCAppender
log4j.appender.ERRORDATASOURCE=org.apache.log4j.jdbc.JDBCAppender
# 定义什么级别的错误将写入到数据库中
log4j.appender.ERRORDATASOURCE.threshold=ERROR
# 设置缓存大小，就是当有1条日志信息时就往数据库插一次，设置的数据库名和表名均为user
log4j.appender.ERRORDATASOURCE.BufferSize=1
log4j.appender.ERRORDATASOURCE.driver=com.mysql.cj.jdbc.Driver
log4j.appender.ERRORDATASOURCE.URL=jdbc:mysql://localhost:3306/logs?allowMultiQueries=true&rewriteBatchedStatements=true&useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false&nullCatalogMeansCurrent=true
log4j.appender.ERRORDATASOURCE.user=root
log4j.appender.ERRORDATASOURCE.password=201314
log4j.appender.ERRORDATASOURCE.layout=org.apache.log4j.PatternLayout
log4j.appender.ERRORDATASOURCE.sql=insert into error_log(log_level,create_time,thread,class,method,log_line,msg,times)values('%-5p','%-d{yyyy-MM-dd HH:mm:ss.SSS}','%t','%c','%M','%L','%m','%r')
#log4j.appender.DATASOURCE.sql=insert into error_log(log_level,create_time,thread,class,method,log_line,msg,times)values('%-5p','%-d{yyyy-MM-dd HH:mm:ss.SSS}','线程:%t','类:%c','方法:%M','行号:%L','详情:%m','耗时:%r')
# log4j.appender.DATASOURCE.sql=insert into error_log(log_level,create_time,thread,class,method,log_line,msg,times)values('[%-5p]','[%-d{yyyy-MM-dd HH:mm:ss.SSS}]','[线程:%t]','[类:%c]','[方法:%M]','[行号:%L]','【详情:%m】','[耗时:%r]')


# CREATE DATABASE logs
#
# USE logs
#
# CREATE TABLE warn_log (
#     id INT auto_increment NOT NULL PRIMARY KEY,
#     log_level varchar(10) NULL,
#     create_time varchar(100) NULL,
#     thread varchar(100) NULL,
#     class varchar(255) NULL,
#     `method` varchar(255) NULL,
#     log_line varchar(100) NULL,
#     msg TEXT NULL,
#     times VARCHAR(10) NULL
# )
# ENGINE=InnoDB
# DEFAULT CHARSET=utf8mb4
# COLLATE=utf8mb4_unicode_ci
# AUTO_INCREMENT=1;
#
# INSERT INTO error_log(log_level,create_time,thread,`class`,`method`,log_line,msg,times)
# VALUES('级别','日期时间','线程','类','方法','行号','详情','耗时');
